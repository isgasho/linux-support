// This file is part of linux-support. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/linux-support/master/COPYRIGHT. No part of linux-support, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
// Copyright Â© 2020 The developers of linux-support. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/linux-support/master/COPYRIGHT.


use self::c::*;
use self::c::IORING_OP::*;
use self::non_null::*;
use super::LoadNonAtomically;
use crate::cpu::HyperThread;
use crate::file_descriptors::*;
use crate::file_descriptors::directory::DirectoryFileDescriptor;
use crate::file_descriptors::directory::c::*;
use crate::file_descriptors::epoll::*;
use crate::file_descriptors::epoll::c::*;
use crate::file_descriptors::eventfd::EventFileDescriptor;
use crate::file_descriptors::file::*;
use crate::file_descriptors::pipes_and_fifos::*;
use crate::file_descriptors::pipes_and_fifos::c::*;
use crate::file_descriptors::socket::*;
use crate::file_descriptors::socket::c::*;
use crate::file_descriptors::memfd::MemoryFileDescriptor;
use crate::memory::huge_pages::DefaultPageSizeAndHugePageSizes;
use crate::memory::mapping::*;
use crate::memory::VirtualAddress;
use bitflags::bitflags;
use errno::errno;
use libc::c_void;
use libc::EAGAIN;
use libc::EBADF;
use libc::EBUSY;
use libc::EINTR;
use libc::EFAULT;
use libc::EINVAL;
use libc::ENOMEM;
use libc::ENXIO;
use libc::EOPNOTSUPP;
use libc::EOVERFLOW;
use libc::iovec;
use libc::mode_t;
use libc::POLLERR;
use libc::POLLHUP;
use libc::POLLIN;
use libc::POLLNVAL;
use libc::POLLOUT;
use libc::POLLPRI;
use libc::POLLRDBAND;
use libc::POLLRDNORM;
use libc::socklen_t;
use libc::sigset_t;
use likely::*;
use std::cmp::max;
use std::collections::BTreeSet;
use std::error;
use std::fmt;
use std::fmt::Debug;
use std::fmt::Display;
use std::fmt::Formatter;
use std::fs::File;
use std::io;
use std::mem::size_of;
use std::mem::transmute;
#[allow(deprecated)] use std::mem::uninitialized;
use std::mem::zeroed;
use std::num::NonZeroU16;
use std::num::NonZeroU32;
use std::num::NonZeroU64;
use std::os::unix::io::AsRawFd;
use std::os::unix::io::RawFd;
use std::os::unix::io::FromRawFd;
use std::os::unix::io::IntoRawFd;
use std::ptr::NonNull;
use std::ptr::null;
use std::ptr::null_mut;
use std::sync::atomic::AtomicU32;
use std::ffi::CStr;
use std::rc::Rc;
use crate::io_priority::CompressedIoPriority;


mod c;

mod non_null;


include!("CompletionQueueRing.rs");
include!("CompletionQueueRingIterator.rs");
include!("FileDescriptorOrigin.rs");
include!("FSyncFlags.rs");
include!("IoUring.rs");
include!("IoUringCreationError.rs");
include!("IoUringFileDescriptor.rs");
include!("PendingAcceptConnection.rs");
include!("PersonalityCredentialsIdentifier.rs");
include!("PollFlags.rs");
include!("ReceiveMessage.rs");
include!("RelativeOrAbsoluteTimeout.rs");
include!("SendMessage.rs");
include!("SendOrReceiveFlags.rs");
include!("SpliceFlags.rs");
include!("SubmissionQueueRing.rs");
include!("SubmissionQueueEntry.rs");
include!("SubmissionQueueEntryOptions.rs");
include!("SubmitError.rs");
include!("SupportedFileDescriptor.rs");
